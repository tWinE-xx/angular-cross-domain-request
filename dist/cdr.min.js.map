{"version":3,"sources":["cdr.module.js","cdr.service.js","cdr.manager.iframe.js","cdr.builder.request.js"],"names":["window","angular","module","CdrService","RequestBuilder","IframeManager","init","bridgePath","cb","register","get","url","params","body","headers","doRequest","post","verb","bridge","request","build","postMessage","cdrService","service","$inject","justDomainName","extractDomain","iframeId","domainIframe","document","getElementById","this","eventMethodRemove","messageEvent","receiveMessage","iframe","createElement","self","onload","a","b","clearTimeout","errorTimeout","resiterReceiveMessageCallback","src","id","style","appendChild","setTimeout","options","console","log","http_polyfill_debug","origin","extractProtocol","contentWindow","guid","createGuid","queue","add","thisOrigin","location","toString","JSON","stringify","e","data","parse","returnedOperation","pop","result","err","factory","eventMethod","addEventListener","removeEventListener","to","domain","indexOf","split","protocol","s4","Math","floor","random","substring","state","item","push","prop","val","i","length","itemToReturn","splice","type"],"mappings":"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","file":"cdr.min.js","sourcesContent":["(function(window, angular){\r\n    //'use strict';\r\n    \r\n    angular.module('cdr',[]);\r\n\r\n})(window, window.angular);","\r\n(function(window, angular) {\r\n    //'use strict';\r\n    angular.module('cdr')\r\n        .service('CdrService', CdrService);\r\n\r\n    CdrService.$inject = ['RequestBuilder', 'IframeManager']\r\n    \r\n    function CdrService(RequestBuilder, IframeManager) {\r\n        \r\n        var cdrService = {\r\n            init: init,\r\n            get: get,\r\n            post: post,\r\n        };\r\n        \r\n        return cdrService;\r\n\r\n        function init(bridgePath, cb){\r\n            IframeManager.register(bridgePath, cb);\r\n        }\r\n        function get(url, params, body, headers, cb){\r\n            return doRequest('GET', url, params, body, headers, cb);\r\n        }\r\n        function post(url, params, body, headers, cb){\r\n            return doRequest('POST', url, params, body, headers, cb);\r\n        }\r\n        function doRequest(verb, url, params, body, headers, cb){\r\n            //debugger;\r\n            if (IframeManager.bridge == null) return cb('doRequest: connector not initialized, please run init(bridgePath, callbackFn) function');\r\n                        \r\n            var request = RequestBuilder.build(url, verb, params, body, headers);\r\n            \r\n            IframeManager.postMessage(request, cb);\r\n            \r\n        }\r\n        \r\n    };\r\n\r\n})(window, window.angular);","(function(window, angular){\r\n    //'use strict';\r\n    \r\n    angular.module('cdr')\r\n        .factory('IframeManager', IframeManager);\r\n\r\n    IframeManager.$inject = [];\r\n\r\n    function IframeManager(){\r\n        \r\n        var factory = {\r\n            bridge: null,\r\n            register: register,\r\n            postMessage: postMessage,\r\n            receiveMessage: receiveMessage\r\n        }\r\n        \r\n        var eventMethod = window.addEventListener ? \"addEventListener\" : \"attachEvent\";\r\n        var eventMethodRemove = window.removeEventListener ? \"removeEventListener\" : \"detachEvent\";\r\n        var messageEvent = eventMethod == \"attachEvent\" ? \"onmessage\" : \"message\";\r\n\r\n        function register(bridgePath, cb){\r\n            var justDomainName = extractDomain(bridgePath);\r\n            var iframeId = 'connect-iframe-'+justDomainName;            \r\n            //check if current domian's iframe loaded already'\r\n            var domainIframe = window.document.getElementById(iframeId);            \r\n            if (domainIframe != null) {\r\n                if (this.bridge == null) this.bridge = domainIframe; \r\n                return cb(domainIframe);\r\n            }\r\n            //clear old event listeners\r\n            window[eventMethodRemove](messageEvent, receiveMessage);\r\n            //load iframe\r\n            var iframe = window.document.createElement('iframe');\r\n            var self = this;\r\n            iframe.onload = function(a,b) {\r\n                //clear iframe creation timeout\r\n                clearTimeout(errorTimeout);\r\n                self.bridge = iframe;\r\n                resiterReceiveMessageCallback(justDomainName);\r\n                return cb(iframe);\r\n            }; \r\n            iframe.src = bridgePath; \r\n            iframe.id = iframeId;\r\n            iframe.style = 'display:none;'\r\n            window.document.body.appendChild(iframe);\r\n            //wait 5 sec to load iframe\r\n            var errorTimeout = setTimeout(function(){\r\n                return cb(null);\r\n            },5000);\r\n        }\r\n\r\n        function postMessage(options, cb){\r\n            if (this.bridge == null) return cb('postMessage: connector not initialized, please run init(bridgePath, callbackFn) function');\r\n            if (console && console.log && window.http_polyfill_debug) \r\n                    console.log('client', 'postMessage', options);\r\n            var origin = extractProtocol(options.url)+'//'+ extractDomain(options.url);\r\n            if (!this.bridge || !this.bridge.contentWindow)\r\n                return cb('postMessage: bridge is not loaded');\r\n            var guid = createGuid();\r\n            //debugger;\r\n            queue.add({guid: guid, cb:cb});\r\n            var thisOrigin = extractProtocol(window.location.toString())+'//'+ extractDomain(window.location.toString());\r\n            return this.bridge.contentWindow.postMessage(JSON.stringify({options: options, guid: guid, origin: thisOrigin}), origin);\r\n    \r\n        }\r\n\r\n        function receiveMessage(e){\r\n            var data = JSON.parse(e.data);\r\n            if (console && console.log && window.http_polyfill_debug) \r\n                console.log('client', 'receiveMessage', data);\r\n            //pop from queue\r\n            //debugger;\r\n            var returnedOperation = queue.pop('guid', data.guid);\r\n            //console.log(returnedOperation, window.connect.utils.queue.state);\r\n            //run callck to client\r\n            if (returnedOperation)\r\n                returnedOperation.cb(data.result.err, data.result.data);\r\n            else if (console && console.log)\r\n                console.log('queue missing cb', data);\r\n        }\r\n        //\r\n        var resiterReceiveMessageCallback = function(to, url){\r\n            // Create IE + others compatible event handler\r\n            // Listen to message returned by the bridge\r\n            window[eventMethod](messageEvent, receiveMessage, false);\r\n            if (console && console.log && window.http_polyfill_debug) \r\n                console.log('client is listening to ', to);\r\n        }\r\n        //\r\n        var extractDomain = function(url) {\r\n            var domain;\r\n            //find & remove protocol (http, ftp, etc.) and get domain\r\n            if (url.indexOf(\"://\") > -1) {\r\n                domain = url.split('/')[2];\r\n            }\r\n            else {\r\n                domain = url.split('/')[0];\r\n            }\r\n            return domain;\r\n        }\r\n        //\r\n        var extractProtocol = function(url) {\r\n            var protocol;\r\n            //find  protocol (http, ftp, etc.) \r\n            if (url.indexOf(\"://\") > -1) {\r\n                protocol = url.split('/')[0];\r\n            }\r\n            else {\r\n                protocol = url.split('/')[0];\r\n            }\r\n            return protocol;\r\n        }\r\n        //\r\n        var createGuid = function() {\r\n            function s4() {\r\n                return Math.floor((1 + Math.random()) * 0x10000)\r\n                .toString(16)\r\n                .substring(1);\r\n            }\r\n            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\r\n                s4() + '-' + s4() + s4() + s4();\r\n        }\r\n        var queue = {\r\n            state: [],\r\n            add: function (item){\r\n                this.state.push(item);\r\n            },\r\n            pop: function(prop, val){\r\n                for (var i=0;i<this.state.length;i++){\r\n                    if (this.state[i][prop] == val){\r\n                        var itemToReturn = this.state[i];\r\n                        this.state.splice(i,1);\r\n                        return itemToReturn;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return factory;\r\n    }\r\n})(window, window.angular);","(function(window, angular) {\r\n    //'use strict';\r\n    angular.module('cdr', [])\r\n            .factory('RequestBuilder', RequestBuilder);\r\n    \r\n    RequestBuilder.$inject = [];\r\n\r\n    function RequestBuilder(){\r\n        var factory = {\r\n            build: build\r\n        }\r\n\r\n        function build(url, verb, params, body, headers){\r\n            return {\r\n                url: url,\r\n                type: verb,\r\n                headers: headers,\r\n                data: body\r\n            }\r\n        }\r\n\r\n        return factory;\r\n    }\r\n\r\n})(window, window.angular);"]}